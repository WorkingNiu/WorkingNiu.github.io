[{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo?\r\r由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本.\r\r 推荐使用 Hugo extended 版本\r\r由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意\r\r在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意\r\r默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览基本配置下的预览 \"\r基本配置下的预览\r 技巧\r\r当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新.\r\r 注意\r\r由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender \r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧\r\r网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多…\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意\r\rHugo extended 版本对于自定义样式是必需的.\r\r 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换语言切换 \"\r语言切换\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意\r\r请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容.\r\r 技巧\r\r也可以使用 文章前置参数 来翻译网址.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎?\r\r以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. \r\r 关于 algolia 的使用技巧\r\r你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json…\r\r","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用\r\r 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! \r\r ","date":"2020-03-05","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意\r\r不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做.\r\r 这是一个前置参数例子: ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧\r\r featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg \r\r ","date":"2020-03-05","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览文章摘要预览 \"\r文章摘要预览\r ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意\r\r请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格.\r\r ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意\r\r不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等.\r\r ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 LoveIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧\r\r有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单.\r\r 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧\r\r你可以在 网站配置 中自定义公式块和行内公式的分割符.\r\r Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: 呈现的输出效果如下: :joy: 而不是 😂 技巧\r\r这个方法可以间接解决一个还未解决的 Hugo 的 issue.\r\r 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram instagram 的文档 一个 instagram 示例: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref 和 relref ref 和 relref 的文档 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet tweet 的文档 一个 tweet 示例: {{\u003c tweet 877500564405444608 \u003e}} 呈现的输出效果如下: Hugo 0.24 Released: Big archetype update + @Netlify _redirects etc. file supporthttps://t.co/X94FmYDEZJ #gohugo #golang @spf13 @bepsays — GoHugo.io (@GoHugoIO) June 21, 2017 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意\r\rHugo extended 版本对于 style shortcode 是必需的.\r\r style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\r ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip\r\r一个 技巧 横幅\r\r ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.1 流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.2 时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.3 甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.4 类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.5 状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.6 Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.7 饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: \r如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r\r","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意\r\r脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库.\r\r 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. \r\r 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r\r 将此页保存为书签，以备将来参考!\r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e \r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem \r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\r\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. \r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r\r ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \"\rThe Stormtroopocat\r 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \"\rThe Dojocat\r 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧\r\rLoveIt 主题提供了一个包含更多功能的 图片的 shortcode.\r\r 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵 man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🐞 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["前端技术"],"content":"es7提供的一种解决异步操作的方案 业务中有时会用到 async/await 是 ES2017中引入的，为了使异步操作得更加方便，本质上 async 函数是 Generator 函数的语法糖。 async 函数书写的方式跟我们普通的函数书写方式一样，只不过是前面多了一个 async 关键字，并且函数返回的是一个 Promise 对象，所接收的值就是函数 return 的值。 let fn = async function(name) { return name; } fn('小明').then(name =\u003e console.log(name)); // 小明 在 async 函数内部可以使用 await 命令，表示等待一个异步函数的返回。await 后面跟着的是一个 Promise 对象，如果不是的话，系统会调用 Promise.resolve() 方法，将其转为一个 resolve 的 Promise 的对象。 let foo = async function() { return await 1; } foo().then(obj =\u003e console.log(obj)); // 1 // 下面将会在 1000 毫秒之后输出 hello world let bar = async function() { return await new Promise(resolve =\u003e { setTimeout(() =\u003e resolve('hello world'),1000) }); } bar().then(src =\u003e console.log(src)); 如果 async 函数当中执行出现错误的话，返回的 Promise 就会被 reject。 let fn = async function() { throw 'reject'; } fn().catch(err =\u003e console.log(err)); // reject 并且，如果 await 后面的 Promise 的状态是 reject ，那么整个 async 函数就会中断执行，错误会被 async 函数的 catch 捕获到。 let foo = async function() { await Promise.reject(1); } foo().catch(err =\u003e console.log(err)) // 1 所以我们用来操作异步请求时，有可能会出现请求失败的情况 ，这个时候为了防止函数停止运行，我们需要一个try…catch 结构来处理错误代码。 let bar = async function() { try { await Promise.reject('error') } catch(e) { console.log(e) } } 上面的写法就保证了我们的异步函数不会因为出错而中断执行。 以上就是 async 函数的简单用法，如果大家想要深入了解的话，推荐大家阅读阮一峰老师的《ES6标准入门》。 你以为我会就这么快就水完了？那是不可能的。说起异步的话，我们都知道 js 在执行的时候只有一个主线程，主线程会不停的读取调用栈。 这个时候我们就要说到 setTimeout(fn,0) 了，在我眼中这段代码的意思是尽快的加入当前的调用栈，只要执行完前面的任务，就会来执行它。我们可以脑补一下这个画面。setTimeout 函数对着 js引擎说：大哥，我这儿任务比较紧急，让我插插队呗。js引擎大哥就不耐烦的说：知道了，知道了，后面排队去，前面的完了就到你了。 所以就出现了下面这段代码： let fn = async function() { let num = await 1; console.log(num) num++; return num; } fn().then(num =\u003e console.log(num)) setTimeout(() =\u003e console.log(100),0); 起初，我认为会输出 100 ，1 ，2。但其实最终结果是1，2，100，这不论是在 node 环境还是 chrome 下都是如此。后来我自信思考了一下，我们 await 后面跟着是一个 resolve 的 Promise 对象，本质上还是同步的代码，所以该 async 函数就如同普通函数一样执行。 我们再改造一下上面的代码： let fn = async function() { let num = await 1; console.log(num) await new Promise(resolve =\u003e setTimeout(() =\u003e resolve(++num)),0); console.log(num) return num; } fn().then(num =\u003e console.log(num)) setTimeout(() =\u003e console.log(100),0); 踩过了上面的那个坑之后，我仔细想了一下，我们 async 函数内部的 setTimeout 虽说是尽快排队，但是 await 命令会在此暂停住，继续往下执行代码，将下面的 setTimeout 先排上队，然后再将 async 内部的排上队。所以这边的代码输出的是 ： 1，100，2，2。 JavaScript 在发展过程中，共经历了回调函数、Promise 对象、Generator 函数，async 函数来处理异步。我们接下来就来看一下 async 函数如何更优雅的处理异步。 假设我们需要分别读取 a、b、c 三个文件，具体代码如下： const fs = require('fs'); // 对 fs 模块进行 Promise 封装 const readFile = function(src) { return new Promise((resolve,reject) =\u003e { fs.readFile(src,(err,data) =\u003e { if(err) reject(err); resolve(data); }) }) } // Promise 的写法 readFile('./a.txt').then(data =\u003e { console.log(data.toString()); return readFile('./b.txt'); }).then(data =\u003e { console.log(data.toString()); return readFile('./c.txt'); }).then(data =\u003e { console.log(data.toString()); }) // Generator 函数写法 function * ascReadFile() { yield readFile('./a.txt'); yield readFile('./b.txt'); yield readFile('./c.txt'); } let g = ascReadFile(); g.next().value.then(data =\u003e { console.log(data.toString()); return g.next().value; }).then(data =\u003e { console.log(data.toString()); return g.next().value; }).then(data =\u003e { console.log(data.toString()); }) // async 函数写法 async function asyncReadFile() { let a = await readFile('./a.txt'); console.log(a.toString()); let b = await readFile('./b.txt'); console.log(b.toString()); let c = await readFile('./c.txt'); console.log(c.toString()); } asyncReadFile(); 上面是一个简化版的代码，省略了错误处理。通过上面代码的对比，我们可以看出来 async 函数比起 Promise 的链式操作，以及 Generator 的手动执行，要方便得太多了，代码上也简洁明了，让我们看起来一目了然。 上面就是我眼中的 async 函数，以及我所理解的异步处理方法。如果大家对我所理解的有任何歧义，欢迎大家来一起探讨。 ","date":"2019-12-29","objectID":"/async_await%E4%BD%BF%E7%94%A8%E7%90%86%E8%A7%A3/:0:0","tags":["JavaScript"],"title":"async/await使用理解","uri":"/async_await%E4%BD%BF%E7%94%A8%E7%90%86%E8%A7%A3/"},{"categories":["前端技术"],"content":"个人收集学习的前端知识，如有错误欢迎指出","date":"2019-12-29","objectID":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/","tags":["Vue","Axios"],"title":"Axios常见封装方法","uri":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/"},{"categories":["前端技术"],"content":"分享一套比较常见的axios二次封装使用方法。 源码参考 本人Github，如有错误欢迎指正。 ","date":"2019-12-29","objectID":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/:0:0","tags":["Vue","Axios"],"title":"Axios常见封装方法","uri":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/"},{"categories":["前端技术"],"content":"request.js 封装axios的工具类，可以放在utils包中，包括前置钩子、后置钩子。这里的baseURL是服务器地址，如http://localhost:8080。 import axios from 'axios' // 创建axios实例 const service = axios.create({ baseURL: process.env.BASE_API, // api的base_url timeout: 15000 // 请求超时时间 }) // request拦截器 service.interceptors.request.use(config =\u003e { /** * 写请求验证，一般在这里写入token,如下可以带上名为XXX的xxxxxxxxxxx...token字符串 * config.headers['xxx'] = xxxxxxxxxxxxxxxxxxxxxxxxxxxx */ return config }, error =\u003e { }) // respone拦截器 service.interceptors.response.use( response =\u003e { const res = response.data /** * code不是200则是请求失败 */ if (response.status !== 200) { /** * 写后端定义的错误码对应需要触发的逻辑。。。 * 例如报500.。。弹个服务器错误提示框什么的 */ return Promise.reject('error') } else { //正常时返回，这里我只要响应数据 return response.data } }, error =\u003e { return Promise.reject(error) } ) export default service ","date":"2019-12-29","objectID":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/:1:0","tags":["Vue","Axios"],"title":"Axios常见封装方法","uri":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/"},{"categories":["前端技术"],"content":"test.js 实际生产中一般对应一组业务请求，例如商品的增删改查，所有请求放在一个js文件里方便管理。 import request from '@/utils/request' //restful API示例 const url = \"/test\" //查询全部数据 export function findall() { return request({ url: url, method: 'get', }) } //根据ID查询数据 export function findByid(id) { return request({ url: url, method: 'get', params: { id }, }) } //新增数据 export function insert(data) { return request({ url: url, method: 'post', data: data }) } //修改数据 export function update(id,data) { return request({ url: url+`/${id}`, method: 'put', data: data }) } //删除数据 export function deleteByid(id) { return request({ url: url+`/${id}`, method: 'delete', }) } ","date":"2019-12-29","objectID":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/:2:0","tags":["Vue","Axios"],"title":"Axios常见封装方法","uri":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/"},{"categories":["前端技术"],"content":"login.vue 实际使用:按需要引入上面的test.js文件中的方法,如下演示了使用update方法。 \u003ctemplate\u003e \u003cdiv\u003e login页 \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e import {findall,findByid,insert,update} from '../../api/test'; export default { data() { return { student: { id: 1, name: 'lzq', money: 999.999 } }; }, mounted() { update(this.student.id,this.student).then(Response =\u003e { console.log(Response) }).catch(err=\u003e{ console.log(err) }) }, methods: { } }; \u003c/script\u003e ","date":"2019-12-29","objectID":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/:3:0","tags":["Vue","Axios"],"title":"Axios常见封装方法","uri":"/axios%E5%B8%B8%E8%A7%81%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95/"},{"categories":["前端技术"],"content":"公司用的elementui，有一部分响应式的需求 自我总结，欢迎指正 去看了下bootstrap的响应式用法， 才发现原来element-ui以及其他好几个vue的ui库都做过响应式的布局的组件， 话不多说直接上代码 \u003cel-row :gutter=\"10\"\u003e \u003cel-col :xs=\"8\" :sm=\"6\" :md=\"4\" :lg=\"3\" :xl=\"1\"\u003e\u003cdiv class=\"grid-content bg-purple\"\u003e\u003c/div\u003e\u003c/el-col\u003e \u003cel-col :xs=\"4\" :sm=\"6\" :md=\"8\" :lg=\"9\" :xl=\"11\"\u003e\u003cdiv class=\"grid-content bg-purple-light\"\u003e\u003c/div\u003e\u003c/el-col\u003e \u003cel-col :xs=\"4\" :sm=\"6\" :md=\"8\" :lg=\"9\" :xl=\"11\"\u003e\u003cdiv class=\"grid-content bg-purple\"\u003e\u003c/div\u003e\u003c/el-col\u003e \u003cel-col :xs=\"8\" :sm=\"6\" :md=\"4\" :lg=\"3\" :xl=\"1\"\u003e\u003cdiv class=\"grid-content bg-purple-light\"\u003e\u003c/div\u003e\u003c/el-col\u003e \u003c/el-row\u003e 其实就是做了每行总共24个栅格，在不同尺寸的页面上如何分配宽度比例： 名称 尺寸 xs \u003c768px sm ≥768px md ≥992px lg ≥1200px xl ≥1920px 比如这里直接给xs赋值4，他的宽度在xs（\u003c768px，手机）就是4/24。 除了直接给赋值数字，也可以给对象如：{span:18,offset:3}。 span即是仅赋值数值时的默认参数位，为宽度。 offset为从左边的偏移量，也是1/24为单位。 ###示例 立刻搞定之前想要的效果：宽屏页面时内容仅仅占页面宽50%居中显示。窄屏幕时占70%，手机时占100%。 \u003cel-row :gutter=\"10\"\u003e \u003cel-col :xs=\"{span:24,offset:0}\" :sm=\"{span:16,offset:4}\" :md=\"{span:12,offset:6}\"\u003e \u003c/el-col\u003e \u003c/el-row\u003e gutter就是各col之间的间距。 这种方法其实使用的还是@media。但是确实方便配置多了。 ","date":"2019-12-29","objectID":"/elementui%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/:0:0","tags":["Vue","Element-UI"],"title":"Element-UI响应式布局","uri":"/elementui%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"},{"categories":["前端技术"],"content":"当我们在开发vue的项目过程中，避免不了在路由切换到其他的component再返回后该组件数据会重新加载，处理这种情况我们就需要用到keep-alive来缓存vue的组件信息，使其不再重新加载。 ","date":"2019-12-29","objectID":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/:0:0","tags":["Vue"],"title":"keep-alive 实现组件信息的缓存","uri":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/"},{"categories":["前端技术"],"content":"app.vue \u003ckeep-alive\u003e \u003crouter-view\u003e\u003c/router-view\u003e \u003c/keep-alive\u003e 但是这种情况会对所有的组件进行缓存，不能达到单个组件缓存的效果。 那么我们给部分组件加上，实现方法如下： \u003cpre style=\"-webkit-tap-highlight-color: transparent; box-sizing: border-box; font-family: Consolas, Menlo, Courier, monospace; font-size: 16px; white-space: pre-wrap; position: relative; line-height: 1.5; color: rgb(153, 153, 153); margin: 1em 0px; padding: 12px 10px; background: rgb(244, 245, 246); border: 1px solid rgb(232, 232, 232);\"\u003e \u003c!--这里是需要keepalive的--\u003e \u003ckeep-alive\u003e \u003crouter-view v-if=\"$route.meta.keepAlive\"\u003e\u003c/router-view\u003e \u003ckeep-alive\u003e \u003c!-- 这里不会被keepAlive --\u003e \u003crouter-view v-if=\"!$route.meta.keepAlive\"\u003e\u003c/router-view\u003e \u003c/pre\u003e ","date":"2019-12-29","objectID":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/:1:0","tags":["Vue"],"title":"keep-alive 实现组件信息的缓存","uri":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/"},{"categories":["前端技术"],"content":"index.js { path: '', name: '', component: '', meta: {keepAlive: true} // 这个是需要keepalive的 }， { path: '', name: '', component: '', meta: {keepAlive: false} // 这是不会被keepalive的 } 这就实现了部分组件的缓存功能 如果缓存的组件想要清空数据或者执行初始化方法，在加载组件的时候调用activated钩子函数，如下： \u003cpre style=\"-webkit-tap-highlight-color: transparent; box-sizing: border-box; font-family: Consolas, Menlo, Courier, monospace; font-size: 16px; white-space: pre-wrap; position: relative; line-height: 1.5; color: rgb(153, 153, 153); margin: 1em 0px; padding: 12px 10px; background: rgb(244, 245, 246); border: 1px solid rgb(232, 232, 232);\"\u003e activated: function () { this.data = ‘’ }\u003c/pre\u003e ","date":"2019-12-29","objectID":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/:2:0","tags":["Vue"],"title":"keep-alive 实现组件信息的缓存","uri":"/keep-alive-%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%93%E5%AD%98/"},{"categories":["前端技术"],"content":"个人使用中一点总计，如有错误欢迎指出 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:0:0","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"1 变量 我们常常在 CSS 中 看到同一个值重复多次，这样难易于代码维护。 理想状态，应是下面这样： const bgColor=\"skyblue\"; $(\".post-content\").css(\"background-color\",bgColor); $(\"#wrap\").css(\"background-color\",bgColor); $(\".arctive\").css(\"background-color\",bgColor); 只要我们修改 bgColor这一个变量， 整个页面的背景颜色都会随之改变。 而 Less 中的变量十分强大，可化万物，值得一提的是，其变量是常量 ，所以只能定义一次，不能重复使用。 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:0","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"值变量 /* Less */ @color: #999; @bgColor: skyblue;//不要添加引号 @width: 50%; #wrap { color: @color; width: @width; } /* 生成后的 CSS */ #wrap { color: #999; width: 50%; } 以 @ 开头 定义变量，并且使用时 直接 键入 @名称。 在平时工作中，我们就可以把 常用的变量 封装到一个文件中，这样利于代码组织维护。 @lightPrimaryColor: #c5cae9; @textPrimaryColor: #fff; @accentColor: rgb(99, 137, 185); @primaryTextColor: #646464; @secondaryTextColor: #000; @dividerColor: #b6b6b6; @borderColor: #dadada; ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:1","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"选择器变量 让 选择器 变成 动态 /* Less */ @mySelector: #wrap; @Wrap: wrap; @{mySelector}{ //变量名 必须使用大括号包裹 color: #999; width: 50%; } .@{Wrap}{ color:#ccc; } #@{Wrap}{ color:#666; } /* 生成的 CSS */ #wrap{ color: #999; width: 50%; } .wrap{ color:#ccc; } #wrap{ color:#666; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:2","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"属性变量 可减少代码书写量 /* Less */ @borderStyle: border-style; @Soild:solid; #wrap{ @{borderStyle}: @Soild;//变量名 必须使用大括号包裹 } /* 生成的 CSS */ #wrap{ border-style:solid; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:3","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"url变量 项目结构改变时，修改其变量即可。 /* Less */ @images: \"../img\";//需要加引号 body { background: url(\"@{images}/dog.png\");//变量名 必须使用大括号包裹 } /* 生成的 CSS */ body { background: url(\"../img/dog.png\"); } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:4","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"声明变量 有点类似于 下面的 混合方法 - 结构: @name: { 属性: 值 ;}; - 使用：@name(); /* Less */ @background: {background:red;}; #main{ @background(); } @Rules:{ width: 200px; height: 200px; border: solid 1px red; }; #con{ @Rules(); } /* 生成的 CSS */ #main{ background:red; } #con{ width: 200px; height: 200px; border: solid 1px red; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:5","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"变量运算 不得不提的是，Less 的变量运算完全超出我的期望，十分强大。 - 加减法时 以第一个数据的单位为基准 - 乘除法时 注意单位一定要统一 /* Less */ @width:300px; @color:#222; #wrap{ width:@width-20; height:@width-20*5; margin:(@width-20)*5; color:@color*2; background-color:@color + #111; } /* 生成的 CSS */ #wrap{ width:280px; height:200px; margin:1400px; color:#444; background-color:#333; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:6","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"变量作用域 一句话理解就是：就近原则，不要跟我提闭包。 /* Less */ @var: @a; @a: 100%; #wrap { width: @var; @a: 9%; } /* 生成的 CSS */ #wrap { width: 9%; } 用变量去定义变量 /* Less */ @fnord: \"I am fnord.\"; @var: \"fnord\"; #wrap::after{ content: @@var; //将@var替换为其值 content:@fnord; } /* 生成的 CSS */ #wrap::after{ content: \"I am fnord.\"; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:1:7","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"2 嵌套 \u0026 ：代表的上一层选择器的名字，此例便是header。 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:2:0","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"\u0026 的妙用 /* Less */ #header{ \u0026:after{ content:\"Less is more!\"; } .title{ font-weight:bold; } \u0026_content{//理解方式：直接把 \u0026 替换成 #header margin:20px; } } /* 生成的 CSS */ #header::after{ content:\"Less is more!\"; } #header .title{ //嵌套了 font-weight:bold; } #header_content{//没有嵌套！ margin:20px; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:2:1","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"媒体查询 在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写 #wrap{ width:500px; } @media screen and (max-width:768px){ #wrap{ width:100px; } } Less 提供了一个十分便捷的方式 /* Less */ #main{ //something... @media screen{ @media (max-width:768px){ width:100px; } } @media tv { width:2000px; } } /* 生成的 CSS */ @media screen and (maxwidth:768px){ #main{ width:100px; } } @media tv{ #main{ width:2000px; } } 唯一的缺点就是 每一个元素都会编译出自己 @media 声明，并不会合并。 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:2:2","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"实战技巧 可以借助 Less 在元素中，去定义自己的私有样式。 /* Less */ #main{ // something.. \u0026.show{ display:block; } } .show{ display:none; } const main = document.getElementById(\"main\"); main.classList.add(\"show\"); 结果： #main.show{ display:block; } .show{ display:none; //会被覆盖。 } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:2:3","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"3 混合方法 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:0","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"无参数方法 方法犹如 声明的集合，使用时 直接键入名称即可。 /* Less */ .card { // 等价于 .card() background: #f6f6f6; -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58); box-shadow: 0 1px 2px rgba(151, 151, 151, .58); } #wrap{ .card;//等价于.card(); } /* 生成的 CSS */ #wrap{ background: #f6f6f6; -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58); box-shadow: 0 1px 2px rgba(151, 151, 151, .58); } 其中 .card 与 .card() 是等价的。 个人建议，为了避免 代码混淆，应写成 : .card(){ //something... } #wrap{ .card(); } 要点： . 与 # 皆可作为 方法前缀。 方法后写不写 () 看个人习惯。 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:1","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"默认参数方法 Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。 @arguments 犹如 JS 中的 arguments 指代的是 全部参数。 传的参数中 必须带着单位。 .border(@a:10px,@b:50px,@c:30px,@color:#000){ border:solid 1px @color; box-shadow: @arguments;//指代的是 全部参数 } #main{ .border(0px,5px,30px,red);//必须带着单位 } #wrap{ .border(0px); } #content{ .border;//等价于 .border() } /* 生成的 CSS */ #main{ border:solid 1px red; box-shadow:0px,5px,30px,red; } #wrap{ border:solid 1px #000; box-shadow: 0px 50px 30px #000; } #content{ border:solid 1px #000; box-shadow: 10px 50px 30px #000; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:2","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"方法的匹配模式 与 面向对象中的多态 很相似 /* Less */ .triangle(top,@width:20px,@color:#000){ border-color:transparent transparent @color transparent ; } .triangle(right,@width:20px,@color:#000){ border-color:transparent @color transparent transparent ; } .triangle(bottom,@width:20px,@color:#000){ border-color:@color transparent transparent transparent ; } .triangle(left,@width:20px,@color:#000){ border-color:transparent transparent transparent @color; } .triangle(@_,@width:20px,@color:#000){ border-style: solid; border-width: @width; } #main{ .triangle(left, 50px, #999) } /* 生成的 CSS */ #main{ border-color:transparent transparent transparent #999; border-style: solid; border-width: 50px; } 第一个参数 left 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。 如果匹配的参数 是变量，则将会匹配，如 @_ 。 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:3","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"方法的命名空间 让方法更加规范 /* Less */ #card(){ background: #723232; .d(@w:300px){ width: @w; #a(@h:300px){ height: @h;//可以使用上一层传进来的方法 width: @w; } } } #wrap{ #card \u003e .d \u003e #a(100px); // 父元素不能加 括号 } #main{ #card .d(); } #con{ //不得单独使用命名空间的方法 //.d() 如果前面没有引入命名空间 #card ，将会报错 #card; // 等价于 #card(); .d(20px); //必须先引入 #card } /* 生成的 CSS */ #wrap{ height:100px; width:300px; } #main{ width:300px; } #con{ width:20px; } 在 CSS 中\u003e 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。 在引入命令空间时，如使用 \u003e 选择器，父元素不能加 括号。 不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。 子方法 可以使用上一层传进来的方法 ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:4","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"方法的条件筛选 Less 没有 if else，可是它有 when /* Less */ #card{ // and 运算符 ，相当于 与运算 \u0026\u0026，必须条件全部符合才会执行 .border(@width,@color,@style) when (@width\u003e100px) and(@color=#999){ border:@style @color @width; } // not 运算符，相当于 非运算 !，条件为 不符合才会执行 .background(@color) when not (@color\u003e=#222){ background:@color; } // , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行 .font(@size:20px) when (@size\u003e50px) , (@size\u003c100px){ font-size: @size; } } #main{ #card\u003e.border(200px,#999,solid); #card .background(#111); #card \u003e .font(40px); } /* 生成后的 CSS */ #main{ border:solid #999 200px; background:#111; font-size:40px; } 要点 比较运算有： \u003e \u003e= = =\u003c \u003c。 = 代表的是等于 除去关键字 true 以外的值都被视为 false： ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:5","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"数量不定的参数 如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。 /* Less */ .boxShadow(...){ box-shadow: @arguments; } .textShadow(@a,...){ text-shadow: @arguments; } #main{ .boxShadow(1px,4px,30px,red); .textShadow(1px,4px,30px,red); } /* 生成后的 CSS */ #main{ box-shadow: 1px 4px 30px red; text-shadow: 1px 4px 30px red; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:6","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"方法使用important！ 使用方法 非常简单，在方法名后 加上关键字即可。 /* Less */ .border{ border: solid 1px red; margin: 50px; } #main{ .border() !important; } /* 生成后的 CSS */ #main { border: solid 1px red !important; margin: 50px !important; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:7","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["前端技术"],"content":"循环方法 Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。 下面是官网中的一个 Demo，模拟了生成栅格系统。 /* Less */ .generate-columns(4); .generate-columns(@n, @i: 1) when (@i =\u003c @n) { .column-@{i} { width: (@i * 100% / @n); } .generate-columns(@n, (@i + 1)); } /* 生成后的 CSS */ .column-1 { width: 25%; } .column-2 { width: 50%; } .column-3 { width: 75%; } .column-4 { width: 100%; } ","date":"2019-12-29","objectID":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/:3:8","tags":["less"],"title":"less简单入门","uri":"/%E4%B8%80%E6%AC%A1%E7%9C%8B%E6%87%82less/"},{"categories":["后端技术"],"content":"个人使用中一点总计，如有错误欢迎指出 ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:0:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"1 业务 系统中的用户user都有唯一对应的地址信息address，每个用户可以有多量车car，类似如下结构 |-- user |-- address |-- carList |-- car1 |-- car2 ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:1:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"2 实体类 public class Address { private Long id; private String province; private String city; } public class Car { private Long id; private String color; private String name; //用户id private Long userId; } public class User { private Long id; //地址信息，和用户是一对一的关系 private Address address; //地址id private Long addressId; //用户拥有的车，和用户是一对多的关系 private List\u003cCar\u003e cars; } ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:2:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"3 对应数据库表 CREATE TABLE IF NOT EXISTS `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `nick_name` varchar(50) DEFAULT NULL, `address_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE IF NOT EXISTS `address` ( `id` int(11) NOT NULL AUTO_INCREMENT, `province` varchar(50) DEFAULT NULL, `city` varchar(50) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE IF NOT EXISTS `car` ( `id` int(11) NOT NULL AUTO_INCREMENT, `color` varchar(50) DEFAULT NULL, `name` varchar(50) DEFAULT NULL, `user_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:3:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"4 一对一映射 以获取用户的唯一地址为例，首先我们定义一个根据地址id查询地址的查询方法 public interface AddressRepository { /** * 根据地址id查询地址 */ @Select(\"SELECT * FROM `address` WHERE id = #{id}\") Address findAddressById(Long id); } 然后我们定义一个根据用户id查询用户的方法 public interface UserRepository { @Select(\"SELECT * FROM `user` where id = #{id}\") User findUserWithAddress(Long id); } 这个时候我们查询出来的user对象中的address属性是空的，和address并没有任何关联。 那么我们要把user中的addressId传递给AddressRepository的查询地址的方法， 然后把查询出的地址对象address赋值给user的address属性,那么我们怎么做呢？ public interface UserRepository { @Select(\"SELECT * FROM `user` where id = #{id}\") @Results({ @Result(property = \"address\", column = \"address_id\", one = @One(select = \"com.kingboy.repository.address.AddressRepository.findAddressById\")) }) User findUserWithAddress(Long id); } 使用@Resutl注解对返回的结果进行配置 property=“address”,表示要将返回的查询结果赋值给user的address属性 column=“address_id\"是指将user表中的address_id作为com.kingboy.repository.address.AddressRepository.findAddressById的查询参数 one表示这是一个一对一的查询 @One(select=“方法全路径”)表示我们调用的方法 ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:4:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"5 一对多查询 以获取用户拥有的所有车car为例，首先我们定义一个根据用户id查询车的查询方法 public interface CarRepository { /** * 根据用户id查询所有的车 */ @Select(\"SELECT * FROM `car` WHERE user_id = #{userId}\") List\u003cCar\u003e findCarByUserId(Long userId); } 然后我们定义一个根据用户id查询用户的方法 public interface UserRepository { @Select(\"SELECT * FROM `user` where id = #{id}\") User findUserWithAddress(Long id); } 这个时候我们查询出来的user对象中的List属性是空的，和car的查询方法并没有任何关联。 那么我们要把user中的用户id传递给CarRepository的查询车的方法， 然后把查询出的集合对象List赋值给user的cars属性,那么我们怎么做呢？ public interface UserRepository { /** * 查询带有车信息的用户===============演示一对多(关于多对多其实就是两个一对多组成) */ @Select(\"SELECT * FROM `user` WHERE id = #{id}\") @Results({ @Result(property = \"cars\", column = \"id\", many = @Many(select = \"com.kingboy.repository.car.CarRepository.findCarByUserId\")) }) User getUserWithCar(Long id); } 我们要使用@Resutl注解对返回的结果进行配置 property = “cars”, 表示要将返回的查询结果赋值给user的cars属性 column = “id” 是指将user表中的用户主键id作为com.kingboy.repository.address.CarRepository.findCarByUserId的查询参数 many 表示这是一个一对多的查询 @Many(select = “方法全路径) 表示我们调用的方法, 方法参数userId就是上面column指定的列值 ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:5:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"5 总结 首先我们统一下概念：查询Address或Car的方法，接下来统称为User的附属查询。 共同点： ①无论是一对一还是一对多，都是通过附属查询来实现的，我们需要定义这个附属查询方法。 ②在主查询方法中通过@One、@Many指定附属查询方法的全路径。 ③都通过column来传递参数给附属方法。 不同点： ①一对一，那么附属方法返回的是一个单独的对象 ②一对多，那么附属方法返回的是一个对象集合 ","date":"2019-12-29","objectID":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/:6:0","tags":["Mybatis"],"title":"Mybatis注解实现一对一和一对多查询","uri":"/mybatis%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%AF%B9%E4%B8%80%E5%92%8C%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/"},{"categories":["后端技术"],"content":"业务中去除一些无法避免的脏数据 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:0:0","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"1 问题 在项目中有一张设备检测信息表DEVICE_INFO_TBL, 每个设备每天都会产生一条检测信息，现在需要从该表中检索出每个设备的最新检测信息。也就是device_id字段不能重复，消除device_id字段重复的记录，而且device_id对应的检测信息test_result是最新的。 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:1:0","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"2 解决思路 用Oracle的row_number() over函数来解决该问题。 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:2:0","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"3 解决过程 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:3:0","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"查看表中的重复记录 select t.id, t.device_id, t.update_dtm, t.test_result from DEVICE_INFO_TBL t 查询结果 id device_id update_dtm test_result 1 21 2019-4-3 正常 2 21 2019-4-4 异常 3 22 2019-4-3 警告 4 22 2019-4-4 正常 5 23 2019-4-4 异常 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:3:1","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"标记重复的记录 select t.id, t.device_id, t.update_dtm, t.test_result, row_number() OVER(PARTITION BY device_id ORDER BY t.update_dtm desc) as row_flg from DEVICE_INFO_TBL t 查询结果 id device_id update_dtm test_result row_flg 1 21 2019-4-3 正常 1 2 21 2019-4-4 异常 2 3 22 2019-4-3 警告 1 4 22 2019-4-4 正常 2 5 23 2019-4-4 异常 1 ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:3:2","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["后端技术"],"content":"过滤重复数据 select temp.id, temp.device_id, temp.update_dtm, temp.test_result from ( select t.id, t.device_id, t.update_dtm, t.test_result, row_number() OVER(PARTITION BY device_id ORDER BY t.update_dtm desc) as row_flg from DEVICE_INFO_TBL t ) temp where temp.row_flg = '1' 查询结果 id device_id update_dtm test_result 2 21 2019-4-4 异常 3 22 2019-4-3 警告 5 23 2019-4-4 异常 row_number() OVER (PARTITION BY COL1 ORDER BY COL2) 表示根据COL1分组，在分组内部根据 COL2排序，而此函数计算的值就表示每组内部排序后的顺序编号（组内连续的唯一的). 　与rownum的区别在于：使用rownum进行排序的时候是先对结果集加入伪列rownum然后再进行排序，而此函数在包含排序从句后是先排序再计算行号码． 　row_number()和rownum差不多，功能更强一点（可以在各个分组内从1开时排序）． 　rank()是跳跃排序，有两个第二名时接下来就是第四名（同样是在各个分组内）． 　dense_rank()l是连续排序，有两个第二名时仍然跟着第三名。相比之下row_number是没有重复值的 ． 　lag（arg1,arg2,arg3): arg1是从其他行返回的表达式 arg2是希望检索的当前行分区的偏移量。是一个正的偏移量，时一个往回检索以前的行的数目。 arg3是在arg2表示的数目超出了分组的范围时返回的值. ","date":"2019-12-29","objectID":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/:3:3","tags":["Oracle"],"title":"Oracle去除某一列值重复的数据","uri":"/oracle%E5%8E%BB%E9%99%A4%E6%9F%90%E4%B8%80%E5%88%97%E5%80%BC%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"},{"categories":["杂谈"],"content":"GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。 最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。 你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。 当你在面试中被问到这个问题，你的内心充满了自信和喜悦。 你轻轻松松的给出了一个“标准答案”： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark，而POST不可以。 GET请求会被浏览器主动cache，而POST不会，除非手动设置。 GET请求只能进行url编码，而POST支持多种编码方式。 GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。 GET请求在URL中传送的参数是有长度限制的，而POST么有。 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。 GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。 GET参数通过URL传递，POST放在Request body中。 （本标准答案参考自w3schools） “很遗憾，这不是我们要的回答！” 请告诉我真相。。。 如果我告诉你GET和POST本质上没有区别你信吗？ 让我们扒下GET和POST的外衣，坦诚相见吧！ GET和POST是什么？HTTP协议中的两种发送请求的方法。 HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。 HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 那么，“标准答案”里的那些区别是怎么回事？ 在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。 但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？ 在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。 好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 你以为本文就这么结束了？ 我们的大BOSS还等着出场呢。。。 这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。 GET和POST还有一个重大区别，简单的说： GET产生一个TCP数据包；POST产生两个TCP数据包。 长的说： 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）； 而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。 也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。 因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？ GET与POST都有自己的语义，不能随便混用。 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。 ","date":"2019-12-29","objectID":"/post%E5%88%B0%E5%BA%95%E5%92%8Cget%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/:0:0","tags":["面试"],"title":"post到底和get有啥区别","uri":"/post%E5%88%B0%E5%BA%95%E5%92%8Cget%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/"},{"categories":["后端技术"],"content":"做毕业设计遇到图片上传回显业务 记录一下，挺简单的 废话不多说直接上代码 @ResponseBody @PostMapping(\"/upload\") public String upImg(List\u003cMultipartFile\u003e files, HttpServletRequest request){ //JDK 1.7提供的files if(files!=null\u0026\u0026files.size()\u003e0){ //循环获取file数组中得文件 for(int i = 0;i\u003cfiles.size();i++){ MultipartFile file = files.get(i); try { Files.copy(file.getInputStream(),Paths.get(uploadPath,file.getOriginalFilename())); //这里的uploadPath是上传的地址,Files.copy即可保存文件 } catch (IOException e) { e.printStackTrace(); } } } return \"success\"; } 回显也容易，springboot提供了一个ResourceLoader 接口，只要实现默认的DeafultResouceLoader即可 private ResourceLoader resourceLoader=new DefaultResourceLoader(); @ResponseBody @GetMapping(value = {\"/getImgs/{filename}\"},produces = MediaType.IMAGE_JPEG_VALUE) public ResponseEntity getImgs(@PathVariable(\"filename\") String fileName){ return ResponseEntity.ok(resourceLoader.getResource(\"file:\"+Paths.get(uploadPath+\"\\\\project\",fileName).toString())); } 这样就可以通过localhost://getImgs/{图片名}，直接访问了，也可以放在中。 遇到一个问题，如果图片是刚上传的，用此方式并不能回显，会出现空白，不知道为什么。所以改用如下方式 @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { super.addResourceHandlers(registry); System.out.println(uploadPath); registry.addResourceHandler(\"/getImgs/project/**\").addResourceLocations(\"file:\"+uploadPath+\"project/\"); registry.addResourceHandler(\"/getImgs/user/**\").addResourceLocations(\"file:\"+uploadPath+\"user/ \"); } 增加spring的静态资源映射，这样就可以直接返回图片了。所以不用再像上面那样，单独写一个路由来返回图片了。 ","date":"2019-12-29","objectID":"/springboot%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9B%9E%E6%98%BE%E6%96%B9%E6%A1%88/:0:0","tags":["Spring Boot"],"title":"Spring Boot提供的图片上传回显方案","uri":"/springboot%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9B%9E%E6%98%BE%E6%96%B9%E6%A1%88/"},{"categories":["后端技术"],"content":"包含整合过程和通用工具类 SpringBoot整合Redis的博客很多，但是很多都不是我想要的结果。因为我只需要整合完成后，可以操作Redis就可以了，并不需要配合缓存相关的注解使用（如@Cacheable）。看了很多博客后，我成功的整合了，并写了个Redis操作工具类。特意在此记录一下，方便后续查阅。 ","date":"2019-12-29","objectID":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/:0:0","tags":["Spring Boot","Redis"],"title":"Spring Boot整合Redis使用","uri":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"categories":["后端技术"],"content":"1 Maven 依赖 \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-redis\u003c/artifactId\u003e \u003c/dependency\u003e ","date":"2019-12-29","objectID":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/:1:0","tags":["Spring Boot","Redis"],"title":"Spring Boot整合Redis使用","uri":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"categories":["后端技术"],"content":"2 application.properties # Redis数据库索引（默认为0） spring.redis.database=0 # Redis服务器地址 spring.redis.host=192.168.0.24 # Redis服务器连接端口 spring.redis.port=6379 # Redis服务器连接密码（默认为空） spring.redis.password= # 连接池最大连接数（使用负值表示没有限制） spring.redis.pool.max-active=200 # 连接池最大阻塞等待时间（使用负值表示没有限制） spring.redis.pool.max-wait=-1 # 连接池中的最大空闲连接 spring.redis.pool.max-idle=10 # 连接池中的最小空闲连接 spring.redis.pool.min-idle=0 # 连接超时时间（毫秒） spring.redis.timeout=1000 ","date":"2019-12-29","objectID":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/:2:0","tags":["Spring Boot","Redis"],"title":"Spring Boot整合Redis使用","uri":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"categories":["后端技术"],"content":"3 Redis配置类 聊聊RedisTemplate的自动配置 其实现在就可以在代码中注入RedisTemplate，为啥可以直接注入呢？先看下源码: @Configuration @ConditionalOnClass(RedisOperations.class) @EnableConfigurationProperties(RedisProperties.class) @Import({ LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class }) public class RedisAutoConfiguration { @Bean @ConditionalOnMissingBean(name = \"redisTemplate\") public RedisTemplate\u003cObject, Object\u003e redisTemplate( RedisConnectionFactory redisConnectionFactory) throws UnknownHostException { RedisTemplate\u003cObject, Object\u003e template = new RedisTemplate\u003c\u003e(); template.setConnectionFactory(redisConnectionFactory); return template; } @Bean @ConditionalOnMissingBean public StringRedisTemplate stringRedisTemplate( RedisConnectionFactory redisConnectionFactory) throws UnknownHostException { StringRedisTemplate template = new StringRedisTemplate(); template.setConnectionFactory(redisConnectionFactory); return template; } } 通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个RedisTemplate和一个StringRedisTemplate。但是，这个RedisTemplate的泛型是\u003cObject,Object\u003e，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为\u003cString,Object\u003e形式的RedisTemplate。并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。 看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。 重新配置一个RedisTemplate package com.lzq.demo.redis; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer; import org.springframework.data.redis.serializer.StringRedisSerializer; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.databind.ObjectMapper; /** * redis配置类 * @author lzq */ @Configuration public class RedisConfig { @Bean @SuppressWarnings(\"all\") public RedisTemplate\u003cString, Object\u003e redisTemplate(RedisConnectionFactory factory) { RedisTemplate\u003cString, Object\u003e template = new RedisTemplate\u003cString, Object\u003e(); template.setConnectionFactory(factory); Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); // key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer); // hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer); // value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer); // hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet(); return template; } } Redis工具类 直接用RedisTemplate操作Redis，需要很多行代码，因此直接封装好一个RedisUtils，这样写代码更方便点。这个RedisUtils交给Spring容器实例化，使用时直接注解注入。 package com.lzq.demo.redis; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.TimeUnit; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Component; import org.springframework.util.CollectionUtils; /** * Redis工具类 * @author lzq */ @Component public final class RedisUtil { @Autowired private RedisTemplate\u003cString, Object\u003e redisTemplate; // =============================common============================ /** * 指定缓存失效时间 * @param key 键 * @param time 时间(秒) * @return */ public boolean expire(String key, long time) { try { if (time \u003e ) { redisTemplate.expire(key, time, TimeUnit.SECONDS); } return true; } catch (Exception e) { e.printStackTrace(); return false; } } /** * 根据key 获取过期时间 * @param key 键 不能为null * @return 时间(秒) 返回代表为永久有效 */ public long getExpire(String key) { return r","date":"2019-12-29","objectID":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/:3:0","tags":["Spring Boot","Redis"],"title":"Spring Boot整合Redis使用","uri":"/spring-boot-%E6%95%B4%E5%90%88redis%E4%BD%BF%E7%94%A8%E9%99%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"categories":["后端技术"],"content":"工作中用到Swagger2对接文档，记录以下整合 ","date":"2019-12-29","objectID":"/spring-boot%E6%95%B4%E5%90%88swagger2/:0:0","tags":["Spring Boot","Swagger2"],"title":"Spring Boot整合Swagger2","uri":"/spring-boot%E6%95%B4%E5%90%88swagger2/"},{"categories":["后端技术"],"content":"1 依赖 \u003cdependency\u003e \u003cgroupId\u003eio.springfox\u003c/groupId\u003e \u003cartifactId\u003espringfox-swagger2\u003c/artifactId\u003e \u003cversion\u003e2.9.2\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eio.springfox\u003c/groupId\u003e \u003cartifactId\u003espringfox-swagger-ui\u003c/artifactId\u003e \u003cversion\u003e2.9.2\u003c/version\u003e \u003c/dependency\u003e ","date":"2019-12-29","objectID":"/spring-boot%E6%95%B4%E5%90%88swagger2/:1:0","tags":["Spring Boot","Swagger2"],"title":"Spring Boot整合Swagger2","uri":"/spring-boot%E6%95%B4%E5%90%88swagger2/"},{"categories":["后端技术"],"content":"2 Swagger配置类 其实这个配置类，只要了解具体能配置哪些东西就好了，毕竟这个东西配置一次之后就不用再动了。 特别要注意的是里面配置了api文件也就是controller包的路径，不然生成的文档扫描不到接口。 package com.example.demo.utils; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; @Configuration public class Swagger2 { @Bean public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.controller\")) .paths(PathSelectors.any()) .build(); } private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(\"springboot利用swagger构建api文档\") .description(\"简单优雅的restfun风格，http://blog.csdn.net/saytime\") .termsOfServiceUrl(\"http://blog.csdn.net/saytime\") .version(\"1.0\") .build(); } } 用@Configuration注解该类，等价于XML中配置beans；用@Bean标注方法等价于XML中配置bean。 Application.class 加上注解@EnableSwagger2 表示开启Swagger package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import springfox.documentation.swagger2.annotations.EnableSwagger2; @SpringBootApplication @EnableSwagger2 public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } 整合完毕，记得写对controller包的地址就行了，然后打开 http://localhost:8080/swagger-ui.html 访问文档，具体端口看自己项目 ","date":"2019-12-29","objectID":"/spring-boot%E6%95%B4%E5%90%88swagger2/:2:0","tags":["Spring Boot","Swagger2"],"title":"Spring Boot整合Swagger2","uri":"/spring-boot%E6%95%B4%E5%90%88swagger2/"},{"categories":["后端技术"],"content":"3 Swagger的注解 swagger通过注解表明该接口会生成文档，包括接口名、请求方法、参数、返回信息的等等。 @Api：修饰整个类，描述Controller的作用 @ApiOperation：描述一个类的一个方法，或者说一个接口 @ApiParam：单个参数描述 @ApiModel：用对象来接收参数 @ApiProperty：用对象接收参数时，描述对象的一个字段 @ApiResponse：HTTP响应其中1个描述 @ApiResponses：HTTP响应整体描述 @ApiIgnore：使用该注解忽略这个API @ApiError ：发生错误返回的信息 @ApiImplicitParam：一个请求参数 @ApiImplicitParams：多个请求参数 ","date":"2019-12-29","objectID":"/spring-boot%E6%95%B4%E5%90%88swagger2/:3:0","tags":["Spring Boot","Swagger2"],"title":"Spring Boot整合Swagger2","uri":"/spring-boot%E6%95%B4%E5%90%88swagger2/"},{"categories":["前端技术"],"content":"项目中用到Vuex,一点个人理解 dispatch：含有异步操作 存储: this.$store.dispatch('setTargetUser',friend); 取值: this.$store.getters.targetUser; commit：同步操作 存储: this.$store.commit('setTargetUser',friend); 取值: this.$store.state.setTargetUser; ","date":"2019-12-29","objectID":"/vue-store%E5%AD%98%E5%82%A8commit-%E5%92%8Cdispatch%E7%9A%84%E5%8C%BA%E5%88%AB/:0:0","tags":["Vue","Vuex"],"title":"vuex存储commit和dispatch的区别","uri":"/vue-store%E5%AD%98%E5%82%A8commit-%E5%92%8Cdispatch%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["前端技术"],"content":"个人收集学习的前端知识，如有错误欢迎指出","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"vue个人学习笔记 从入门到入坑😤 脚手架在3.0版本后发生过改动，简单来说就是构建出的vue项目目录结构与配置文件有点不一样，看自己需求使用哪个吧，本人习惯使用2.96版本,以下创建方式二选一。 ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:0:0","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"vue-cli 2.9.6 ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:0","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"① 安装node.js node.js官网直接下一个无脑下一步安装。 安装完成后，按住win+R后输入cmd打开指令面板，输入以下指令。 node -v 如果出现版本号则表示node.js安装成功 ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:1","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"② 安装cnpm 安装npm的淘宝镜像cnpm，要问啥是npm。。自行百度这里先略过，接下来会一直用到，如果执行了下面的语句，下面的所有npm操作都换成cnpm就可以了。 npm install -g cnpm --registry=https://registry.npm.taobao.org ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:2","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"③ 安装vue-cli 2.9.6 官方的项目构建工具 npm install --global vue-cli ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:3","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"④ 创建项目 在指令面板去到想创建项目的目录，输入以下指令创建，vuebase是我的新项目名，各位自己取个名字。 F:\\VUE_project\u003evue init webpack-simple vuebase ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:4","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"⑤ 下载依赖 指令面板中进入刚才创建的项目，执行命令 npm install 下载依赖包(ps:如果第二步安装了cnpm推荐用cnpm，国内快很多)。 F:\\VUE_project\\vuebase\u003enpm install ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:5","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"⑥ 启动项目 这里等上一步加载完项目已经搭建完了，运行下面代码启动，启动成功后访问http://localhost:8080 F:\\VUE_project\\vuebase\u003enpm run dev ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:1:6","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"vue-cli 4.x ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:0","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"① 安装node.js node.js官网直接下一个无脑下一步安装 安装完成后，按住win+R后输入cmd打开指令面板，输入以下指令 node -v 如果出现版本号则表示node.js安装成功 ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:1","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"② 安装cnpm 安装npm的淘宝镜像cnpm，要问啥是npm。。自行百度这里先略过，接下来会一直用到，如果执行了下面的语句，下面的所有npm操作都换成cnpm就可以了。 npm install -g cnpm --registry=https://registry.npm.taobao.org ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:2","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"③ 安装vue-cli npm install -g @vue/cli ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:3","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"④ 启动官方ui工具 vue ui ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:4","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"⑤ 创建项目 vue ui里面都是中文无脑操作，点击创建项目一步步走就行了，注意一下一般依赖会安装vue-router,其他按中文提示无脑安装就行 ","date":"2019-12-29","objectID":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/:2:5","tags":["Vue"],"title":"从零构建Vue项目教学","uri":"/%E4%BF%9D%E5%A7%86%E5%BC%8F%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E6%95%99%E5%AD%A6/"},{"categories":["前端技术"],"content":"个人收集学习的前端面试题，如有错误欢迎指出","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"个人收集的一些vue面试题。 很多讲的不够深入，如有错误欢迎指正🙌 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:0:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"vue两个核心 数据驱动 组件系统 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:1:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"router和route router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象，经常用的跳转链接就可以用this.$router.push，和router-link跳转一样。。。 route相当于当前正在跳转的路由对象，可以从里面获取name,path,params,query等 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:2:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"keep-alive 当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。在组件切换过程中将状态保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验性和 transition 相似，keep-alive 是一个抽象组件：它自身不会渲染成一个 DOM 元素，也不会出现在父组件链中。主要在app,vue中配置，通过属性判断是否使用缓存. 使用示例 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:3:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"app.vue \u003cpre\u003e \u003c!--这里是需要keepalive的--\u003e \u003ckeep-alive\u003e \u003crouter-view v-if=\"$route.meta.keepAlive\"\u003e\u003c/router-view\u003e \u003ckeep-alive\u003e \u003c!-- 这里不会被keepAlive --\u003e \u003crouter-view v-if=\"!$route.meta.keepAlive\"\u003e\u003c/router-view\u003e \u003c/pre\u003e ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:3:1","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"index.js { path: '', name: '', component: '', meta: {keepAlive: true} // 这个是需要keepalive的 }， { path: '', name: '', component: , meta: {keepAlive: false} // 这是不会被keepalive的 } ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:3:2","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"vue-router 导航钩子 vue-router 导航钩子包括全局级钩子、路由级钩子、组件级钩子 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:4:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"全局级钩子 import router from '../router' import NProgress from 'nprogress' // Progress 进度条组件 import 'nprogress/nprogress.css'// Progress 进度条样式 /** * 路由守卫 */ router.beforeEach((to, from, next) =\u003e { /** to: (Route路由对象) 即将要进入的目标 路由对象 to对象下面的属性： path params query hash fullPath matched name meta from: (Route路由对象) 当前导航正要离开的路由 next: (Function函数) 一定要调用该方法来 resolve 这个钩子。 调用方法：next(参数或者空) ***必须调用 next(无参数的时候): 进行管道中的下一个钩子，如果走到最后一个钩子函数，那么 导航的状态就是 confirmed （确认的） next('/404') 或者 next({ path: '/404' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。 */ NProgress.start()//开始进度条 /** * 巴拉巴拉全局路由前的业务逻辑 */ next() //记得next(),不然不走 }) router.afterEach(() =\u003e { /** * 巴拉巴拉全局路由后的业务逻辑 */ NProgress.done() // 结束进度条 }) ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:4:1","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"路由级钩子 import Vue from 'vue' import Router from 'vue-router' Vue.use(Router) export default new Router({ routes: [ { path: '/login', component: () =\u003e import('@/views/login/login'), beforeEnter:(to, from, next)=\u003e{ next(); }, hidden: true }, ] }) ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:4:2","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"组件级钩子 \u003ctemplate\u003e \u003cdiv\u003e login页 \u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { data() {return {};}, mounted() {}, methods: {}, beforeRouteEnter(to, from, next) { // 在渲染该组件的对应路由被 confirm 前调用 // 不！能！获取组件实例 `this` // 因为当钩子执行前，组件实例还没被创建 }, beforeRouteUpdate(to, from, next) { // 在当前路由改变，但是该组件被复用时调用 // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候， // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。 // 可以访问组件实例 `this` }, beforeRouteLeave(to, from, next) { // 导航离开该组件的对应路由时调用 // 可以访问组件实例 `this` } }; \u003c/script\u003e ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:4:3","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"单页应用优缺点 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:5:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"优点 1速度快，用户体验好 2对服务器压力小 3适用于前后端分离，可以对应多端 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:5:1","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"缺点 1首次记载时间长 2seo支持不好 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:5:2","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"生命周期 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:0","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"created(创建) 数据data已经初始化完成，方法也已经可以调用，但是DOM为渲染。在这个周期里面如果进行请求是可以改变数据并渲染，由于DOM未挂载，请求过多或者占用时间过长会导致页面线上空白。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:1","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"beforeMount(挂载前) DOM未完成挂载，数据也初始化完成，但是数据的双向绑定还是显示{{}}，这是因为Vue采用了Virtual DOM（虚拟Dom）技术。先占住了一个坑。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:2","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"mounted(挂载) 数据和DOM都完成挂载，在上一个周期占位的数据把值给渲染进去。一般请求会放在这个地方，因为这边请求改变数据之后刚好 能渲染。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:3","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"beforeUpdate(更新前) 只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，当你请求赋值一个数据的时候会执行这个周期，如果没有数据改变不执行。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:4","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"updated(更新) 只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。beforeUpdate和updated要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和容易死循环。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:5","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"beforeDestroy(销毁前) 这个周期是在组件销毁之前执行，在我项目开发中，觉得这个其实有点类似路由钩子beforeRouterLeave,都是在路由离开的时候执行，只不过beforeDestroy无法阻止路由跳转，但是可以做一些路由离开的时候操作，因为这个周期里面还可以使用data和method。比如一个倒计时组件，如果在路由跳转的时候没有清除，这个定时器还是在的，这时候就可以在这个里面清除计时器。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:6","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"Destroyed(销毁) 说实在的，我还真的不知道这个周期跟beforeDestroy有什么区别，我在这个周期里面调用data的数据和methods的方法都能调用，所以我会觉得跟beforeDestroy是一样的。 ","date":"2019-12-29","objectID":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/:6:7","tags":["面试"],"title":"前端面试题-Vue篇","uri":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-vue%E7%AF%87/"},{"categories":["前端技术"],"content":"工作中总结的小程序跳转方法总结 如有不足欢迎补充 ","date":"2019-12-29","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/:0:0","tags":["微信小程序"],"title":"微信小程序跳转总结","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/"},{"categories":["前端技术"],"content":"1 API 跳转 // 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。 // 注意：调用 navigateTo 跳转时，调用该方法的页面会被加入堆栈，但是 redirectTo wx.navigateTo({ url: 'page/home/home?user_id=111' }) // 关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。 wx.navigateTo({ url: 'page/home/home?user_id=111'　// 页面 A }) wx.navigateTo({ url: 'page/detail/detail?product_id=222'　// 页面 B }) // 跳转到页面 A wx.navigateBack({ delta: 2 }) // 关闭当前页面，跳转到应用内的某个页面。 wx.redirectTo({ url: 'page/home/home?user_id=111' }) // 跳转到tabBar页面（在app.json中注册过的tabBar页面），同时关闭其他非tabBar页面。 wx.switchTab({ url: 'page/index/index' }) // 关闭所有页面，打开到应用内的某个页面。 wx.reLanch({ url: 'page/home/home?user_id=111' }) ","date":"2019-12-29","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/:1:0","tags":["微信小程序"],"title":"微信小程序跳转总结","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/"},{"categories":["前端技术"],"content":"2 wxml 页面组件跳转 可以通过设置open-type属性指明页面跳转方式 // navigator 组件默认的 open-type 为 navigate \u003cnavigator url=\"/page/navigate/navigate?title=navigate\" hover-class=\"navigator-hover\"\u003e 跳转到新页面 \u003c/navigator\u003e // redirect 对应 API 中的 wx.redirect 方法 \u003cnavigator url=\"../../redirect/redirect/redirect?title=redirect\" open-type=\"redirect\" hover-class=\"other-navigator-hover\"\u003e 在当前页打开 \u003c/navigator\u003e // switchTab 对应 API 中的 wx.switchTab 方法 \u003cnavigator url=\"/page/index/index\" open-type=\"switchTab\" hover-class=\"other-navigator-hover\"\u003e 切换 Tab \u003c/navigator\u003e // reLanch 对应 API 中的 wx.reLanch 方法 \u003cnavigator url=\"../../redirect/redirect/redirect?title=redirect\" open-type=\"redirect\" hover-class=\"other-navigator-hover\"\u003e 关闭所有页面，打开到应用内的某个页面 \u003c/navigator\u003e // navigateBack 对应 API 中的 wx.navigateBack 方法 \u003cnavigator url=\"/page/index/index\" open-type=\"navigateBack\" hover-class=\"other-navigator-hover\"\u003e 关闭当前页面，返回上一级页面或多级页面 \u003c/navigator\u003e ","date":"2019-12-29","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/:2:0","tags":["微信小程序"],"title":"微信小程序跳转总结","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/"},{"categories":["前端技术"],"content":"聊聊ES6新特性 如有错误欢迎指出 ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:0:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"1 const和let 在ES6之前，我们都是用var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如: function aa() { if(flag) { var test = 'hello man' } else { console.log(test) } } 以上的代码实际上是： function aa() { var test // 变量提升，函数最顶部 if(flag) { test = 'hello man' } else { //此处访问 test 值为 undefined console.log(test) } //此处访问 test 值为 undefined } 所以不用关心flag是否为 true or false。实际上，无论如何 test 都会被创建声明。 ES6中 我们通常用 let 和 const 来声明，let 表示变量、const 表示常量。let 和 const 都是块级作用域。怎么理解这个块级作用域？ 在一个函数内部 在一个代码块内部 说白了只要在{}花括号内的代码块即可以认为 let 和 const 的作用域。 function aa() { if(flag) { let test = 'hello man' } else { //test 在此处访问不到 console.log(test) } } let 的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。 再来说说 const const 声明的变量必须提供一个值，而且会被认为是常量，意思就是它的值被设置完成后就不能再修改了。 const name = 'lux' name = 'joe' // 再次赋值此时会报错 还有，如果 const 的是一个对象，对象所包含的值是可以被修改的。抽象一点儿说，就是对象所指向的地址不能改变，而变量成员是可以修改的。 const student = { name: 'cc' } // 没毛病 student.name = 'yy' // 如果这样子就会报错了 student = { name: 'yy' } 说说TDZ(暂时性死区) { console.log(value) // 报错 let value = 'lala' } 我们都知道，JS引擎扫描代码时，如果发现变量声明，用 var 声明变量时会将声明提升到函数或全局作用域的顶部。但是 let 或者 const，会将声明关进一个小黑屋也是TDZ(暂时性死区)，只有执行到变量声明这句语句时，变量才会从小黑屋被放出来，才能安全使用这个变量。 面试题 var funcs = [] for (var i = 0; i \u003c 10; i++) { funcs.push(function() { console.log(i) }) } funcs.forEach(function(func) { func() }) 这样的面试题是大家很常见，很多同学一看就知道输出十次10 但是如果我们想依次输出0到9呢？ 有两种解决方法，直接看一下代码： // ES5知识，我们可以利用“立即调用函数”解决这个问题 var funcs = [] for (var i = 0; i \u003c 10; i++) { funcs.push( (function(value) { return function() { console.log(value) } })(i) ) } funcs.forEach(function(func) { func() }) // 再来看看es6怎么处理的 const funcs = [] for (let i = 0; i \u003c 10; i++) { funcs.push(function() { console.log(i) }) } funcs.forEach(func =\u003e func()) ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:1:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"2 模板字符串 第一个用途，基本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定。 //ES5 var name = 'lux' console.log('hello' + name) //es6 const name = 'lux' console.log(`hello ${name}`) //hello lux 第二个用途，在ES5时我们通过反斜杠()来做多行字符串或者字符串一行行拼接。ES6反引号(``)直接搞定。 // ES5 var msg = \"Hi \\ man! \" // ES6 const template = `\u003cdiv\u003e \u003cspan\u003ehello world\u003c/span\u003e \u003c/div\u003e` 对于字符串 ES6+ 当然也提供了很多厉害也很有意思的方法😊 说几个常用的。 // 1.includes：判断是否包含然后直接返回布尔值 const str = 'hahay' console.log(str.includes('y')) // true // 2.repeat: 获取字符串重复n次 const str = 'he' console.log(str.repeat(3)) // 'hehehe' //如果你带入小数, Math.floor(num) 来处理 // s.repeat(3.1) 或者 s.repeat(3.9) 都当做成 s.repeat(3) 来处理 // 3. startsWith 和 endsWith 判断是否以 给定文本 开始或者结束 const str = 'hello world!' console.log(str.startsWith('hello')) // true console.log(str.endsWith('!')) // true // 4. padStart 和 padEnd 填充字符串，应用场景：时分秒 setInterval(() =\u003e { const now = new Date() const hours = now.getHours().toString() const minutes = now.getMinutes().toString() const seconds = now.getSeconds().toString() console.log(`${hours.padStart(2, 0)}:${minutes.padStart(2, 0)}:${seconds.padStart(2, 0)}`) }, 1000) 关于模板字符串现在比较常出现的面试题有两道 模拟一个模板字符串的实现。 let address = '东莞' let name = 'lala' let str = '${name}在${address}上班...' // 模拟一个方法 myTemplate(str) 最终输出 'lala在东莞上班...' function myTemplate(str) { // try it } console.log(myTemplate(str)) // lala在东莞上班... 实现标签化模板(自定义模板规则)。 const name = 'cc' const gender = 'male' const hobby = 'basketball' // 实现tag最终输出 '姓名：**cc**，性别：**male**，爱好：**basketball**' function tag(strings) { // do it } const str = tag`姓名：${name}，性别：${gender}，爱好：${hobby}` console.log(str) // '姓名：**cc**，性别：**male**，爱好：**basketball**' ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:2:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"3 函数 ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:3:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"默认参数 ES5 默认参数 function action(num) { num = num || 200 //当传入num时，num为传入的值 //当没传入参数时，num即有了默认值200 return num } num传入为0的时候就是false，但是我们实际的需求就是要拿到num = 0，此时num = 200 明显与我们的实际想要的效果明显不一样 ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。 ES6 默认参数 function action(num = 200) { console.log(num) } action(0) // 0 action() //200 action(300) //300 ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:3:1","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"箭头函数 箭头函数最直观的三个特点。 不需要 function 关键字来创建函数 省略 return 关键字 继承当前上下文的 this 关键字 当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{} 和 return；例如: var people = name =\u003e 'hello' + name //参数name就没有括号 var people = (name, age) =\u003e { const fullName = 'hello' + name return fullName } //如果缺少()或者{}就会报错 笔试题 // 请使用ES6重构以下代码 var calculate = function(x, y, z) { if (typeof x != 'number') { x = 0 } if (typeof y != 'number') { y = 6 } var dwt = x % y var result if (dwt == z) { result = true } if (dwt != z) { result = false } return result } const calculate = (x, y, z) =\u003e { x = typeof x !== 'number' ? 0 : x y = typeof y !== 'number' ? 6 : y return x % y === z } ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:3:2","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"4 拓展对象功能 对象初始化简写 ES5我们对于对象都是以键值对的形式书写，是有可能出现键值对重名的。例如： function people(name, age) { return { name: name, age: age }; } 键值对重名，ES6可以简写如下： function people(name, age) { return { name, age }; } ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法： const people = { name: 'lux', getName: function() { console.log(this.name) } } ES6通过省略冒号与 function 关键字，将这个语法变得更简洁 const people = { name: 'lux', getName () { console.log(this.name) } } ES6 对象提供了 Object.assign()这个方法来实现浅复制。 Object.assign() 可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{} const objA = { name: 'cc', age: 18 } const objB = { address: 'beijing' } const objC = {} // 这个为目标对象 const obj = Object.assign(objC, objA, objB) // 我们将 objA objB objC obj 分别输出看看 console.log(objA) // { name: 'cc', age: 18 } console.log(objB) // { address: 'beijing' } console.log(objC) // { name: 'cc', age: 18, address: 'beijing' } console.log(obj) // { name: 'cc', age: 18, address: 'beijing' } // 是的，目标对象ObjC的值被改变了。 // so，如果objC也是你的一个源对象的话。请在objC前面填在一个目标对象{} Object.assign({}, objC, objA, objB) ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:4:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"5 解构 ES5我们提取对象中的信息形式如下： const people = { name: 'lux', age: 20 } const name = people.name const age = people.age console.log(name + ' --- ' + age) 解构能让我们从对象或者数组里取出数据存为变量，例如 //对象 const people = { name: 'lux', age: 20 } const { name, age } = people console.log(`${name}--- ${age}`) //数组 const color = ['red', 'blue'] const [first, second] = color console.log(first) //'red' console.log(second) //'blue' 面试题 // 请使用 ES6 重构一下代码 // 第一题 var jsonParse = require('body-parser').jsonParse // 第二题 var body = request.body var username = body.username var password = body.password // 1. import { jsonParse } from 'body-parser' // 2. const { body, body: { username, password } } = request ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:5:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"6 Spread Operator 组装对象或者数组 //数组 const color = ['red', 'yellow'] const colorful = [...color, 'green', 'pink'] console.log(colorful) //[red, yellow, green, pink] //对象 const alp = { fist: 'a', second: 'b'} const alphabets = { ...alp, third: 'c' } console.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\" 有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项 //数组 const number = [1,2,3,4,5] const [first, ...rest] = number console.log(rest) //2,3,4,5 //对象 const user = { username: 'lux', gender: 'female', age: 19, address: 'peking' } const { username, ...rest } = user console.log(rest) //{\"address\": \"peking\", \"age\": 19, \"gender\": \"female\" 对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边 const first = { a: 1, b: 2, c: 6, } const second = { c: 3, d: 4 } const total = { ...first, ...second } console.log(total) // { a: 1, b: 2, c: 3, d: 4 } ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:6:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"7 import 和 export import导入模块、export暴露模块 //全部导入 import people from './example' //有一种特殊情况，即允许你将整个模块当作单一对象进行导入 //该模块的所有导出都会作为对象的属性存在 import * as example from \"./example.js\" console.log(example.name) console.log(example.age) console.log(example.getName()) //导入部分 import {name, age} from './example' // 导出默认, 有且只有一个默认 export default App // 部分导出 export class App extend Component {}; 1.当用export default people导出时，就用 import people 导入（不带大括号） 2.一个文件里，有且只能有一个export default。但可以有多个export。 3.当用export name 时，就用import { name }导入（记得带上大括号） 4.当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } 5.当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:7:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"8 Promise 在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。 说白了就是用同步的方式去写异步代码。 fetch('/api/todos') .then(res =\u003e res.json()) .then(data =\u003e ({ data })) .catch(err =\u003e ({ err })); 面试题 setTimeout(function() { console.log(1) }, 0); new Promise(function executor(resolve) { console.log(2); for( var i=0 ; i\u003c10000 ; i++ ) { i == 9999 \u0026\u0026 resolve(); } console.log(3); }).then(function() { console.log(4); }); console.log(5); ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:8:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["前端技术"],"content":"9 Generators 生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，最直观的表现就是比普通的function多了个星号*，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。 这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。 OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。 // 生成器 function *createIterator() { yield 1; yield 2; yield 3; } // 生成器能像正规函数那样被调用，但会返回一个迭代器 let iterator = createIterator(); console.log(iterator.next().value); // 1 console.log(iterator.next().value); // 2 console.log(iterator.next().value); // 3 那生成器和迭代器又有什么用处呢？ 围绕着生成器的许多兴奋点都与异步编程直接相关。异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async/await）。 生成器可以让我们的代码进行等待。就不用嵌套的回调函数。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。 那么问题来了，咱们也不能手动一直调用next()方法，你需要一个能够调用生成器并启动迭代器的方法。就像这样子的 function run(taskDef) { //taskDef即一个生成器函数 // 创建迭代器，让它在别处可用 let task = taskDef(); // 启动任务 let result = task.next(); // 递归使用函数来保持对 next() 的调用 function step() { // 如果还有更多要做的 if (!result.done) { result = task.next(); step(); } } // 开始处理过程 step(); } ","date":"2019-12-29","objectID":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/:9:0","tags":["ES6","JavaScript"],"title":"快速上手ES6","uri":"/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bes6/"},{"categories":["杂谈"],"content":"这是一篇用于预览 Markdown 基本语法的文章。","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"这是一篇用于预览  Markdown 基本语法的文章。 文章内容基于 GitHub Flavo红色 Markdown Spec。 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:0:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"1 引言  Markdown 是一种用于编写结构化文档的纯文本格式。它基于电子邮件和论坛文章的格式所约定。 它由 John Gruber (在 Aaron Swartz 的帮助下)开发，于 2004 年以语法描述和用于将 Markdown 转换为 HTML 的 Perl 脚本(Markdown.pl)的形式发布。 在接下来的十年中，许多实现被开发出来。一些用脚注、表和其他文档元素的约定扩展了原始 Markdown 语法。 有些允许 Markdown 文档以 HTML 以外的格式呈现。 像 红色dit，StackOverflow 和 GitHub 这样的网站有上百万的用户在使用 Markdown。 Markdown 开始被应用于网络以外的领域，包括作者书籍、文章、幻灯片、信件和课堂笔记。 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:1:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"2 块和内联元素 我们可以把一个文档看成一系列的块，如段落、引用、列表、标题和代码块。 有些块(如引号和列表)可以包含其它的块\u0008，即 容器块； 其他的块(如标题和段落)则包含内联元素(如文本、链接、强调、图像、内联代码等)，即 叶子块。 块的符号总是优先于内联元素的符号。例如： - `one - two` `one two` ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:2:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3 叶子块 本节描述用于组成 Markdown 文档的不同类型的叶子块。 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:3:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.1 换行符 *** ------ ____ ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:3:1","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.2 标题 关于 ATX 风格标题和 Setext 风格标题\r\r本文只展示 ATX 风格标题，关于 Setext 风格标题的介绍请参考 GFM Setext headings 说明。 笔者不推荐在 Hugo 的 Markdown 文档中使用 Setext 风格标题。 \r\r\r ## H2 二级标题 ### H3 三级标题 #### H4 四级标题 ##### H5 五级标题 ###### H6 六级标题 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:3:2","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"H2 二级标题 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"H3 三级标题 H4 四级标题 H5 五级标题 H6 六级标题 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:1","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.3 代码块 关于缩进式代码块和围栏式代码块\r\r本文只展示围栏式代码块，关于缩进式代码块的介绍请参考 GFM Indented code blocks 说明。 笔者不推荐在 Hugo 的 Markdown 文档中使用缩进式代码块。 \r\r\r ``` foo() ``` ~~~ foo() ~~~ ```` foo() ```` ```ruby def foo(x) return 3 end ``` foo() foo() foo() def foo(x) return 3 end package main import \"fmt\" func main() { fmt.Println(\"Hello, 世界\") } ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:2","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.4 段落 这是一个段落。 这还是之前段落的一部分。 这是新的段落。 这是一个段落。 这还是之前段落的一部分。 这是新的段落。 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:3","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.5 引用链接的定义 [foo]: /url \"title\" [foo] [bar]: /url [bar] foo bar ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:4","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3.6 空白行 块之间的空白行将被忽略，除了它们在确定列表是紧还是松时所起的作用。 文档开头和结尾的空行也会被忽略。 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:4:5","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4 容器块 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4.1 引用 \u003e Foo \u003e \u003e - **bar** \u003e - baz Foo bar baz ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:1","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4.2 无序列表 - 项目 1 * 项目 A - 项目 B 一些说明 + 项目 a * 项目 b - 项目 c + 项目 C + 项目 2 * 项目 3 项目 1 项目 A 项目 B 一些说明 项目 a 项目 b 项目 c 项目 C 项目 2 项目 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:2","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4.3 有序列表 1. 项目 1 1. 项目 A 2. 项目 B 一些说明 1. 项目 a 2. 项目 b 3. 项目 c 3. 项目 C 2. 项目 2 3. 项目 3 项目 1 项目 A 项目 B 一些说明 项目 a 项目 b 项目 c 项目 C 项目 2 项目 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:3","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4.4 任务列表 - [ ] 任务 1 * [X] 任务 A - 任务 B + [ ] 任务 a * [ ] 任务 b - [X] 任务 c + [X] 任务 C + [ ] 任务 2 * [X] 任务 3 任务 1 任务 A 任务 B 任务 a 任务 b 任务 c 任务 C 任务 2 任务 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:4","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4.5 表格 | _颜色_ | 水果 | 蔬菜 | | ---------- |:---------------:| -----------:| | 红色 | *苹果* | 辣椒 | | ~~橙色~~ | 橘子 | **胡萝卜** | | 绿色 | ~~***梨子***~~ | 菠菜 | 颜色 水果 蔬菜 红色 苹果 辣椒 橙色 橘子 胡萝卜 绿色 梨子 菠菜 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:5:5","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"3. 页内锚 [脚注](#footnote) ## 4. 脚注 {#footnote} 脚注 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:6:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"4. 脚注 这是一个基本的数字脚注[^1] 带有 \"label\" 标签的脚注[^label] 下定义的脚注[^!DEF] 带有链接的脚注[^pa] [^1]: 这是一个基本的数字脚注 [^label]: 带有 \"label\" 标签的脚注 [^pa]: [LoveIt 主题](https://github.com/dillonzq/LoveIt) [^!DEF]: 下定义的脚注 这是一个基本的数字脚注1 带有 “label” 标签的脚注2 下定义的脚注3 带有链接的脚注4 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:7:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"5. 内联格式 `内联代码块` \u003ckbd\u003ectrl\u003c/kbd\u003e+\u003ckbd\u003ealt\u003c/kbd\u003e+\u003ckbd\u003edel\u003c/kbd\u003e **加粗 1** 和 __加粗 2__ *倾斜 1* 和 _倾斜 2_ ~~删除线~~ ***加粗 1 和 倾斜 1*** ___加粗 2 和 倾斜 2___ __*加粗 2 和 倾斜 1*__ **_加粗 1 和 倾斜 2_** ~~*删除线 倾斜 1*~~ 和 *~~删除线 倾斜 2~~* ~~_删除线 倾斜 2_~~ 和 _~~删除线 倾斜 2~~_ ~~**删除线 加粗 1**~~ 和 **~~删除线 加粗 1~~** ~~__删除线 加粗 2__~~ 和 __~~删除线 加粗 2~~__ ~~***删除线 倾斜 1 加粗 1***~~ 和 ***~~删除线 倾斜 1 加粗 1~~*** ~~___删除线 倾斜 2 加粗 2___~~ 和 ___~~删除线 倾斜 2 加粗 2~~___ **~~*删除线 倾斜 1 加粗 1*~~** 和 *~~**删除线 倾斜 1 加粗 1**~~* __~~_删除线 倾斜 2 加粗 2_~~__ 和 _~~__删除线 倾斜 2 加粗 2__~~_ **~~_删除线 倾斜 2 加粗 1_~~** 和 _~~**删除线 倾斜 2 加粗 1**~~_ __~~*删除线 倾斜 1 加粗 2*~~__ 和 *~~__删除线 倾斜 1 加粗 2__~~* 内联代码块 ctrl+alt+del 加粗 1 和 加粗 2 倾斜 1 和 倾斜 2 删除线 加粗 1 和 倾斜 1 加粗 2 和 倾斜 2 加粗 2 和 倾斜 1 加粗 1 和 倾斜 2 删除线 倾斜 1 和 删除线 倾斜 2 删除线 倾斜 2 和 删除线 倾斜 2 删除线 加粗 1 和 删除线 加粗 1 删除线 加粗 2 和 删除线 加粗 2 删除线 倾斜 1 加粗 1 和 删除线 倾斜 1 加粗 1 删除线 倾斜 2 加粗 2 和 删除线 倾斜 2 加粗 2 删除线 倾斜 1 加粗 1 和 删除线 倾斜 1 加粗 1 删除线 倾斜 2 加粗 2 和 删除线 倾斜 2 加粗 2 删除线 倾斜 2 加粗 1 和 删除线 倾斜 2 加粗 1 删除线 倾斜 1 加粗 2 和 删除线 倾斜 1 加粗 2 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:8:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"6. 图片 Web image ![Web Picture](https://static.dillonzq.com/images/20190817130904-U6cPUk.jpg \"Web Picture\") Local image ![Local Picture](logo-revolunet-carre.jpg \"Local Picture\") contact@revolunet.com @revolunet Issue #1 https://github.com/revolunet/sublimetext-markdown-preview/ This is a link https://github.com/revolunet/sublimetext-markdown-preview/. This is a link \"https://github.com/revolunet/sublimetext-markdown-preview/\". With this link (https://github.com/revolunet/sublimetext-markdown-preview/), it still works. Web image Web PictureWeb Picture \"\rWeb Picture\r Local image Local PictureLocal Picture \"\rLocal Picture\r https://www.google.com contact@revolunet.com @revolunet Issue #1 https://github.com/revolunet/sublimetext-markdown-preview/ This is a link https://github.com/revolunet/sublimetext-markdown-preview/. This is a link “https://github.com/revolunet/sublimetext-markdown-preview/\". With this link (https://github.com/revolunet/sublimetext-markdown-preview/), it still works. ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:9:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Abbreviation Abbreviations source are found in a separate markdown file specified in frontmatter. The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium The HTML specification is maintained by the W3C. ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:10:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Unorde红色 List Unorde红色 List - item 1 * item A * item B more text + item a + item b + item c * item C - item 2 - item 3 Unorde红色 List item 1 item A item B more text item a item b item c item C item 2 item 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:11:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Orde红色 List Orde红色 List 1. item 1 1. item A 2. item B more text 1. item a 2. item b 3. item c 3. item C 2. item 2 3. item 3 Orde红色 List item 1 item A item B more text item a item b item c item C item 2 item 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:12:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Mixed Lists Really Mixed Lists should break with sane_lists on. Mixed Lists - item 1 * [X] item A * [ ] item B more text 1. item a 2. itemb 3. item c * [X] item C - item 2 - item 3 Really Mixed Lists - item 1 * [X] item A - item B more text 1. item a + itemb + [ ] item c 3. item C 2. item 2 - [X] item 3 Mixed Lists item 1 item A item B more text item a itemb item c item C item 2 item 3 Really Mixed Lists item 1 item A item B more text item a itemb item c item C item 2 item 3 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:13:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Blocks This is a block. This is more of a block. This is a block.\rThis is more of a block.\r ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:14:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Block Quotes \u003e This is a block quote \u003e\u003e How does it look? This is a block quote. How does it look? I think it looks good. ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:15:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Fenced Block Assuming guessing is not enabled. ``` // Fenced **without** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` ```javascript // Fenced **with** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` // Fenced **without** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } // Fenced **with** highlighting function doIt() { for (var i = 1; i \u003c= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:16:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Tables | _颜色_ | 水果 | 蔬菜 | | ------------- |:---------------:| -----------------:| | 红色 | *苹果* | [辣椒](#Tables) | | ~~橙色~~ | 橘子 | **胡萝卜** | | 绿色 | ~~***梨子***~~ | 菠菜 | 颜色 水果 蔬菜 红色 苹果 辣椒 橙色 橘子 胡萝卜 绿色 梨子 菠菜 Class or Enum Year Month Day Hours Minutes Seconds* Zone Offset Zone ID toString Output Where Discussed Instant 2013-08-20T15:16:26.355Z Instant Class LocalDate 2013-08-20 Date Classes LocalDateTime 2013-08-20T08:16:26.937 Date and Time Classes ZonedDateTime 2013-08-21T00:16:26.941+09:00[Asia/Tokyo] Time Zone and Offset Classes LocalTime 08:16:26.943 Date and Time Classes MonthDay --08-20 Date Classes Year 2013 Date Classes YearMonth 2013-08 Date Classes Month AUGUST DayOfWeek and Month Enums OffsetDateTime 2013-08-20T08:16:26.954-07:00 Time Zone and Offset Classes OffsetTime 08:16:26.957-07:00 Time Zone and Offset Classes Duration ** ** ** PT20H (20 hours) Period and Duration Period *** *** P10D (10 days) Period and Duration ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:17:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Smart Strong Text with double__underscore__words. __Strong__ still works. __this__works__too__ Text with double__underscore__words. Strong still works. this__works__too ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:18:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Smarty \"double quotes\" 'single quotes' da--sh elipsis... “double quotes” ‘single quotes’ da–sh elipsis… ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:19:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Neseted Fences ``` This will still be parsed as a normal indented code block. ``` ``` This will still be parsed as a fenced code block. ``` - This is a list that contains multiple code blocks. - Here is an indented block ``` This will still be parsed as a normal indented code block. ``` - Here is a fenced code block: ``` This will still be parsed as a fenced code block. ``` \u003e ``` \u003e Blockquotes? \u003e Not a problem! \u003e ``` ```\rThis will still be parsed\ras a normal indented code block.\r```\r This will still be parsed as a fenced code block. This is a list that contains multiple code blocks. Here is an indented block ```\rThis will still be parsed\ras a normal indented code block.\r```\r Here is a fenced code block: This will still be parsed as a fenced code block. Blockquotes? Not a problem! Others ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:20:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Github Emoji This is a test for emoji 😄. The emojis are images linked to github assets :octocat:. This is a test for emoji 😄. The emojis are images linked to github assets :octocat:. ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"People 👍👎👽👼💢😠😧😲👶💙😊💥🙇‍♂️:bowtie:👦👰💔👤👥👏😰💥😖😕👷‍♂️👮‍♂️👫👩‍❤️‍👨👩‍❤️‍💋‍👨😢😿💘💃👯‍♀️💨😞😥💫😵💧👂❗😑👀👊👨‍👩‍👦😨:feelsgood:🐾:finnadie:🔥✊😳😦🖕👧:goberserk::godmode::绿色_heart:❕❔😬😁😀💂‍♂️💇‍♀️✋💩🙉❤️😍😻💓💗:hurtrealbad:😯👿💁‍♀️😇👺👹😂😹💋😗😽😚😘😙😆👄💌👨👲👳‍♂️😷💆‍♀️🤘💪🎵💅:neckbeard:😐🙅‍♀️😶👃🎶👌🙆‍♀️👴👵👐😮😔😣🙍‍♀️👱‍♂️🙎‍♀️👇👈👉☝️👆💩😾🙏👸👊💜❓😡:rage1::rage2::rage3::rage4:✋🙌🙋‍♀️☺️😌💞🏃‍♂️🏃😆😱🙀🙈💩💀😴😪😄😸😃😺😈😏😼😭✨💖🙊💬⭐🌟😛😝😜😎:suspect:😓💦😅💭👎👍:ti红色_face:👅😤:trollface:💕👬👭😒✌️🚶‍♂️👋😩😉👩😟💛😋💤 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:1","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Nature 🐜🐤🐻🐝🐞🐦🌼🐡🐗💐🐛🌵🐫🐱🐈🌸🌰🐔☁️🐮🐄🌙🐊🌀🌳🐶🐕🐬🐉🐲🐪🌾🌍🌎🌏🐘:ever绿色_tree:🍂🌓🌛🐟🌁🍀🐸🌕🌝🌐🐐🐹🐥🐣🌿🌺🐝🐴🐨🌗🌜🍃🐆🍁🌌🐒🐵🌔🐭🐁🍄🌑🌚🌃🌊:octocat:🐙🐂🌴🐼⛅🐾🐧🐷🐖🐽🐩🐰🐇🐎🐏🐀🐓🌹🌱🐑🐚🐌🐍❄️☃️:squirrel:🌞🌻☀️🐯🐅🐠🌷🐢☂️🌋🌘🌖🐃🌒🌔🐳🐋🐺⚡ ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:2","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Objects 🎱⏰:苹果:🎨👟🍼🎈🎍🍌📊⚾🏀🛀🛁🔋🍺🍻🔔🍱🚴‍♂️👙🎂🃏✒️📘💣📖🔖📑📚👢🎳🍞💼💡🍰📆📲📷🍬📇💿📉📈🍒🍫🎄🎬📋📕🔐🌂♣️🍸☕💻🎊🍪🌽:c红色it_card:👑🔮🍛🍮🍡🎯📅♦️💵🎎🚪🍩👗📀📧🥚🍆🔌✉️✉📩💶👓📠📁🎆🍥🎣🎏🔦🐬💾🎴🏈👣🍴🍤🍟🎲💎👻🎁💝⛳🍇:绿色_苹果::绿色_book:🎸🔫🍔🔨👜🎧♥️🔆👠🔪🍯🏇⌛⏳🍨🍦📥📨📱🎃👖🔑👘🏮📒🍋💄🔒🔏🍭➿🔊📢🔅🔍🔎🀄📫📪📬📭👞🍖📣🍈📝🎤🔬💽💸💰🎓🚵‍♂️🎥🎹🎼🔇📛👔📰🔕📓📔🔩🍢📖📂:橙色_book:📤📦📄📃📟📎🍑🍐✏✏️☎️💊:pine苹果:🍕📯📮👝🍗💷👛📌📻🍜🎀🍚🍙🍘🎑💍🏉🎽🍶👡🎅🛰️🎷🎒✂️📜💺🍧👕👞🚿🎿🚬🏂⚽🔉👾♠️🍝❇️🎇🔈🍲📏🍓🏄‍♂️🍣🍠🏊‍♂️💉🎉🎋🍊🍵☎📞🔭🎾🚽🍅🎩📐🏆🍹🎺👕📺🔓📼📹🎮🎻⌚🍉🎐🍷👚👒🔧💴 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:3","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Places 🚡✈️🚑⚓🚛🏧🏦💈🔰🚲🚙⛵🌉🚅🚄🚌🚏🚗🎠:checke红色_flag:⛪🎪🌇🌆🇨🇳🚧🏪🎌🇩🇪🏬🇪🇸🏰🏤🏭🎡🚒⛲🇫🇷⛽🇬🇧🚁🏥🏨♨️🏠🏡🇮🇹🏮🗾🏯🇯🇵🇰🇷🚈🏩🚐🚝🗻🚠🚞🗿🏢🚘🚍🚔🚖🎭🚓🏣🚃🌈:红色_car:🚀🎢🚨📍🚣‍♂️🇷🇺⛵🏫🚢🎰🚤🌠🚉🗽🚂🌅🌄🚟🚕⛺🎫🗼🚜🚥🚋🚆🚊🚩🚎🚚🇬🇧🇺🇸🚦⚠️💒 ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:4","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Symbols 💯🔢🅰️🆎🔤🔡🉑♒♈◀️⏬⏫⬇️🔽▶️⤵️⤴️⬅️↙️↘️➡️↪️⬆️↕️🔼↖️↗️🔃🔄🅱️🚼🔙🛄☑️‼️⚫⬛◾◼️▪️🔲♋🔠♑💹🚸🎦🆑🕐🕙🕥🕚🕦🕛🕧🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤㊗️🆒©️➰💱🛃💠🚯8️⃣✴️✳️🔚⏩5️⃣4️⃣🆓♊#️⃣💟✔️➗💲❗➖✖️➕🆔🉐ℹ️⁉️🔟🈁🔵🔷:large_橙色_diamond:🛅↔️↩️♌♎🔗ⓜ️🚹🚇📴:negative_squa红色_cross_mark:🆕🆖9️⃣🚳⛔🚫📵🚷🚭🚱⭕🅾️🆗🔛1️⃣⛎🅿️〽️🛂♓🚰🚮🔘♻️:红色_circle::registe红色:🔁🔂🚻⏪🈂️♐♏㊙️7️⃣:shipit:📶6️⃣🔯🔹:small_橙色_diamond::small_红色_triangle::small_红色_triangle_down:🔜🆘🔣♉3️⃣™️🔝🔱🔀2️⃣🈹🈴🈺🈯🈷️🈶🈵🈚🈸🈲🈳🔞🆙📳♍🆚〰️🚾♿✅⚪💮⬜◽◻️▫️🔳🚺❌0️⃣ ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:21:5","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["杂谈"],"content":"Insert ^^insert^^ ^^*insert 倾斜*^^ *^^insert 倾斜 2^^* ^^_insert 倾斜_^^ _^^insert 倾斜 2^^_ ^^**insert 加粗**^^ **^^insert 加粗 2^^** ^^__insert 加粗__^^ __^^insert 加粗 2^^__ ^^***insert 倾斜 加粗***^^ ***^^insert 倾斜 加粗 2^^*** ^^___insert 倾斜 加粗___^^ ___^^insert 倾斜 加粗 2^^___ **^^*insert 倾斜 加粗*^^** *^^**insert 倾斜 加粗 2**^^* __^^_insert 倾斜 加粗_^^__ _^^__insert 倾斜 加粗 2__^^_ **^^_insert 倾斜 加粗_^^** _^^**insert 倾斜 加粗 2**^^_ __^^*insert 倾斜 加粗*^^__ *^^__insert 倾斜 加粗 2__^^* ^^insert^^ ^^insert 倾斜^^ ^^insert 倾斜 2^^ ^^insert 倾斜^^ ^^insert 倾斜 2^^ ^^insert 加粗^^ ^^insert 加粗 2^^ ^^insert 加粗^^ ^^insert 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ ^^insert 倾斜 加粗^^ ^^insert 倾斜 加粗 2^^ 这是一个基本的数字脚注 ↩︎ 带有 “label” 标签的脚注 ↩︎ 下定义的脚注 ↩︎ LoveIt 主题 ↩︎ ","date":"2019-08-25","objectID":"/markdown%E8%AF%AD%E6%B3%95/:22:0","tags":["Markdown","语法"],"title":"Markdown语法","uri":"/markdown%E8%AF%AD%E6%B3%95/"},{"categories":["后端技术"],"content":"学习整理笔记 ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:0:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 5 （1）泛型  通过引入泛型，我们将获得编译时类型的安全和运行时更小地抛出ClassCastExceptions的可能。 （2）foreach，更简洁的for循环 （3）自动拆箱装箱  自动装箱：Java自动将原始类型值转换成对应的对象，比如将int的变量转换成Integer对象，这个过程叫做装箱，反之将Integer对象转换成int类型值，这个过程叫做拆箱。原始类型：byte,short,char,int,long,float,double,boolean。对应的封装类：Byte,Short,Character,Integer,Long,Float,Double,Boolean。 （4）枚举 （5）静态导入 （6）元数据 （7）线程池 （8）Java Generics ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:1:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 6 （1）DestTop类和SystemTray类 （2）使用JAXB2来实现对象与XML之间的映射 （3）StAX （4）使用Complier API （5）轻量级的Http Server API （6）插入式注解处理API(Pluggable Annotation Processing API) （7）用Console开发控制台程序 （8）对脚本语言的支持 （9）Common Annotations ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:2:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 7 （1）switch中可以使用字串了 （2）泛型实例化类型自动推断 （3）新增一些取环境信息的工具方法 （4）Boolean类型反转，空指针安全,参与位运算 （5）两个char间的equals （6）安全的加减乘除 （7）二进制变量的表示,支持将整数类型用二进制来表示，用0b开头。 （8）Try-with-resource语句 （9）使用一个catch语言来处理多种异常类型 ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:3:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 8 （1）接口的默认方法 （2）Lambda 表达式 （3）函数式接口 （4）方法与构造函数引用 （5）Lambda 作用域 （6）访问局部变量 （7）访问对象字段与静态变量 （8）Date API （9）多重Annotation 注解 （10）访问接口的默认方法 ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:4:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 9 （1）Java 平台级模块系统 （2）Linking （3）JShell : 交互式 Java REPL （4）改进的 Javadoc （5）集合工厂方法 （6）改进的 Stream API （7）私有接口方法 （8）HTTP/2 （9）多版本兼容 JAR ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:5:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 10 （1）局部变量类型推断 （2）将JDK多存储库合并为单储存库 （3）垃圾回收接口 （4）并行Full GC 的G1 （5）应用数据共享 （6）线程局部管控 （7）移除Native-Header Generation Tool （javah） （8）Unicode 标签扩展 （9）备用内存设备上分配堆内存 （10）基于实验JAVA 的JIT 编译器 （11）Root 证书 （12）基于时间的版本控制 ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:6:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["后端技术"],"content":"JDK 11 （1）Local Var  Lambda表达式中，可以使用var关键字来标识变量，变量类型由编译器自行推断。 （2）HttpClient  JDK11的新的HttpClient支持HTTP/2和WebSocket，并且可以使用异步接口。 （3）List API  对于List接口，新增了一个of(T…)接口，用于快速创建List对象。 （4）读写文件  对Files类增加了writeString和readString两个静态方法，可以直接把String写入文件，或者把整个文件读出为一个String。 （5）String API  String新增了strip()方法，和trim()相比，strip()可以去掉Unicode空格，例如，中文空格。  新增isBlank()方法，可判断字符串是不是“空白”字符串。  新增lines()方法，可以非常方便地按行分割字符串。  新增repeat()方法，可以指定重复次数。 ","date":"2019-05-29","objectID":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/:7:0","tags":["Java"],"title":"JDK各个版本新特性整理","uri":"/jdk%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"},{"categories":["杂谈"],"content":"经常遇到各种锁,稍微整理下 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:0:0","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"悲观锁 顾名思义，很悲观，就是每次拿数据的时候都认为别的线程会修改数据，所以在每次拿的时候都会给数据上锁。上锁之后，当别的线程想要拿数据时，就会阻塞，直到给数据上锁的线程将事务提交或者回滚。传统的关系型数据库里就用到了很多这种锁机制，比如行锁，表锁，共享锁，排他锁等，都是在做操作之前先上锁。 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:0","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"行锁 下面演示行锁，打开两个mysql命令行界面，两个线程分别执行如下操作：（左边先执行） Local PictureLocal Picture \"\rLocal Picture\r 左边的线程，在事务中通过select for update语句给sid = 1的数据行上了锁。右边的线程此时可以使用select语句读取数据，但是如果也使用select for update语句，就会阻塞，使用update，add，delete也会阻塞。 当左边的线程将事务提交（或者回滚），右边的线程就会获取锁，线程不再阻塞： Local PictureLocal Picture \"\rLocal Picture\r 此时，右边的线程获取锁，左边的线程如果执行类似操作，也会被阻塞： Local PictureLocal Picture \"\rLocal Picture\r ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:1","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"表锁 上述例子中，如果使用如下语句就是使用的表锁： select * from student for update; ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:2","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"页锁 行锁锁指定行，表锁锁整张表，页锁是折中实现，即一次锁定相邻的一组记录。 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:3","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"共享锁 共享锁又称为读锁，一个线程给数据加上共享锁后，其他线程只能读数据，不能修改。 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:4","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"排他锁 排他锁又称为写锁，和共享锁的区别在于，其他线程既不能读也不能修改。 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:1:5","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"乐观锁 乐观锁其实不会上锁。顾名思义，很乐观，它默认别的线程不会修改数据，所以不会上锁。只是在更新前去判断别的线程在此期间有没有修改数据，如果修改了，会交给业务层去处理。 常用的实现方式是使用版本戳，例如在一张表中添加一个整型字段version，每更新version++，比如某个时刻version=1，线程A读取了此version=1，线程B也读取了此version=1，当线程A更新数据之前，判断version仍然为1，更新成功，version++变为2，但是当线程B再提交更新时，发现version变为2了，与之前读的version=1不一致，就知道有别的线程更新了数据，这个时候就会进行业务逻辑的处理。 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:2:0","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"},{"categories":["杂谈"],"content":"总结 通常情况下，写操作较少时，使用乐观锁，写操作较多时，使用悲观锁 ","date":"2019-01-15","objectID":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/:3:0","tags":["锁"],"title":"悲观锁和乐观锁","uri":"/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/"}]